name: CI Pipeline
 
on:
  push:
    branches: [ docker-build ]
  pull_request:
    branches: [ docker-build ]

jobs:
  backend:
    name: Build e Teste do Backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
      SPRING_DATASOURCE_USERNAME: testuser
      SPRING_DATASOURCE_PASSWORD: testpass
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar JDK 20
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '20'

      - name: Cache do Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build e Test backend
        working-directory: API   
        run: mvn clean verify

  build-push-backend:
    name: Build da imagem docker e envio para o Docker Hub
    needs: [backend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build e push da Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./API
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/estacionamento-backend:latest
   
  frontend:
    name: Build e Teste do Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # ou '18', conforme a necessidade do seu projeto

      - name: Cache de dependências Node
        uses: actions/cache@v3
        with:
          path: interface/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('interface/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Instalar dependências do frontend
        working-directory: interface
        run: npm i --force

      - name: Executar testes do frontend
        working-directory: interface
        run: npm run test:unit

  build-push-frontend:
    name: Build da imagem docker e envio para o Docker Hub
    needs: [frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build e push da Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./interface
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/estacionamento-frontend:latest

  terraform:
    name: Provisionar infraestrutura com Terraform
    runs-on: ubuntu-latest
    needs: [build-push-backend, build-push-frontend]
    env:
      GCP_USER: ${{ secrets.GCP_USER }}
      SSH_KEY_PUB: ${{ secrets.SSH_KEY_PUB }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.4

      - name: Criar arquivo de credenciais do GCP
        run: echo '${{ secrets.GCP_CREDENTIALS }}' > ${{ github.workspace }}/ansible/credentials.json

      - name: Configurar variável de autenticação
        run: export GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/ansible/credentials.json

      - name: Executar Terraform
        working-directory: ansible
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/ansible/credentials.json
        run: |
          terraform init
          terraform import google_compute_instance.vm projects/celtic-shape-452222-c9/zones/southamerica-east1-a/instances/vm-aplicacao
          terraform import google_compute_firewall.firewall projects/celtic-shape-452222-c9/global/firewalls/allow-ssh-and-app
          terraform apply -auto-approve \
            -var="gcp_user=$GCP_USER" \
            -var="ssh_key_pub=$SSH_KEY_PUB"
          terraform output -raw vm_ip_address > ip.txt
