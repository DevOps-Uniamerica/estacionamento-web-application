on:
  push:
    branches: [ k8s-prod ]
  workflow_dispatch:

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
      SPRING_DATASOURCE_USERNAME: testuser
      SPRING_DATASOURCE_PASSWORD: testpass

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar JDK 20
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '20'

      - name: Cache Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build e Test Backend
        working-directory: API
        run: mvn clean verify

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build e Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./API
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/estacionamento-backend:latest

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: interface/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('interface/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Instalar depend√™ncias Frontend
        working-directory: interface
        run: npm i --force

      - name: Executar testes Frontend
        working-directory: interface
        run: npm run test:unit

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build e Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./interface
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/estacionamento-frontend:latest

  terraform-infra:
    name: Provisionar Infraestrutura K8s
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    outputs:
      cluster_name: ${{ steps.terraform.outputs.cluster_name }}
      cluster_location: ${{ steps.terraform.outputs.cluster_location }}

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.4
          terraform_wrapper: false

      - name: Configurar credenciais GCP
        run: echo '${{ secrets.GCP_CREDENTIALS }}' > ${{ github.workspace }}/credentials.json

      - name: Executar Terraform
        id: terraform
        working-directory: .
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/credentials.json
        run: |
          terraform init -input=false
          terraform plan -input=false
          terraform apply -auto-approve -input=false
          
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "cluster_location=$(terraform output -raw cluster_location)" >> $GITHUB_OUTPUT

  deploy-k8s:
    name: Deploy Aplica√ß√£o no Kubernetes
    runs-on: ubuntu-latest
    needs: terraform-infra

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar credenciais GCP
        run: echo '${{ secrets.GCP_CREDENTIALS }}' > ${{ github.workspace }}/credentials.json

      - name: Configurar Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          project_id: celtic-shape-452222-c9

      - name: Instalar gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Configurar kubectl
        run: |
          gcloud container clusters get-credentials ${{ needs.terraform-infra.outputs.cluster_name }} \
            --location ${{ needs.terraform-infra.outputs.cluster_location }} \
            --project celtic-shape-452222-c9

      - name: Instalar Ansible e depend√™ncias
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install ansible kubernetes google-auth google-cloud-container

      - name: Instalar Ansible Kubernetes Collection
        run: ansible-galaxy collection install kubernetes.core

      - name: Executar Ansible Deploy
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/credentials.json
        run: |
          ansible-playbook -i k8s-inventory.ini deploy-k8s.yml \
            -e cluster_name=${{ needs.terraform-infra.outputs.cluster_name }} \
            -e cluster_location=${{ needs.terraform-infra.outputs.cluster_location }} \
            -e docker_user=${{ secrets.DOCKER_USERNAME }}

      - name: Verificar status do deploy
        run: |
          kubectl get pods -n estacionamento
          kubectl get services -n estacionamento
          
          echo "Aguardando LoadBalancer..."
          kubectl wait --for=condition=ready pod -l app=frontend -n estacionamento --timeout=300s
          
          EXTERNAL_IP=$(kubectl get service frontend-service -n estacionamento -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ ! -z "$EXTERNAL_IP" ]; then
            echo "üöÄ Aplica√ß√£o dispon√≠vel em: http://$EXTERNAL_IP"
          else
            echo "‚è≥ LoadBalancer ainda sendo provisionado. Execute: kubectl get service frontend-service -n estacionamento"
          fi
